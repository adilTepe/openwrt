From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
Subject: [PATCH v2] ARM/Triductor: Add custom I/O, net driver hooks, and SKB extend support

---
 arch/arm/include/asm/io.h                    |  6 ++++
 arch/arm/Kconfig                             |  7 +++++
 drivers/net/Makefile                         |  2 ++
 drivers/net/ethernet/marvell/sky2.c          | 98 +++++++++++++++++++++++++++++++-------------------------
 drivers/net/ppp/ppp_generic.c                | 35 ++++++++++++++++++++++
 include/linux/skbuff.h                       |  5 ++++
 net/bridge/br_input.c                        |  5 ++++
 net/core/skbuff.c                            | 88 +++++++++++++++++++++++++++++++++++++++++++++++-----
 net/ipv4/ip_output.c                         |  5 ++++
 net/ipv6/ip6_input.c                         | 26 +++++++++++++++
 net/ipv6/ip6_output.c                        |  6 ++++
 net/netfilter/nf_conntrack_standalone.c      |  5 +++-
 12 files changed, 251 insertions(+), 37 deletions(-)

diff --git a/arch/arm/include/asm/io.h b/arch/arm/include/asm/io.h
index e7f012345..57c89abc0 100644
--- a/arch/arm/include/asm/io.h
+++ b/arch/arm/include/asm/io.h
@@ -197,7 +197,11 @@
 #ifdef CONFIG_NEED_MACH_IO_H
 #include <mach/io.h>
 #elif defined(CONFIG_PCI)
+#if (defined CONFIG_ARCH_TRIDUCTOR)
+#define IO_SPACE_LIMIT  ((resource_size_t)0xffffffff)
+#else
 #define IO_SPACE_LIMIT  ((resource_size_t)0xfffff)
+#endif
 #define __io(a) __typesafe_io(PCI_IO_VIRT_BASE + ((a) & IO_SPACE_LIMIT))
 #else
 #define __io(a) __typesafe_io((a) & IO_SPACE_LIMIT)
diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index d1ab789ef..c4e5df037 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -604,6 +604,13 @@ config ARCH_TEGRA
 	select HAVE_ARM_ARCH_TIMER
 	select ARCH_SUPPORTS_BIG_ENDIAN
 
+config RTOS_SKB_EXTEND
+	bool
+	default y
+
+config CHIP_LSWMC
+	bool
+	default y
 #
 # This is sorted alphabetically by mach-* pathname.  However, plat-*
 # Kconfigs may be included either alphabetically (according to the
diff --git a/drivers/net/Makefile b/drivers/net/Makefile
index 23457abcd..bcdef1432 100644
--- a/drivers/net/Makefile
+++ b/drivers/net/Makefile
@@ -84,3 +84,5 @@ obj-$(CONFIG_USB4_NET) += thunderbolt-net.o
 obj-$(CONFIG_NETDEVSIM) += netdevsim/
 obj-$(CONFIG_NET_FAILOVER) += net_failover.o
 
+obj-$(CONFIG_ARCH_TRIDUCTOR) += triductor/
+
diff --git a/drivers/net/ethernet/marvell/sky2.c b/drivers/net/ethernet/marvell/sky2.c
index 12345abcde..67890abcde 100644
--- a/drivers/net/ethernet/marvell/sky2.c
+++ b/drivers/net/ethernet/marvell/sky2.c
@@ -35,7 +35,10 @@
 #include <linux/dmi.h>
 #include <linux/of_device.h>
 #include <linux/of_net.h>
-
+#ifdef CONFIG_ARCH_TRIDUCTOR
+#include <linux/dma-map-ops.h>
+#include <linux/of_address.h>
+#endif
 #include <asm/irq.h>
 
 #include "sky2.h"
@@ -1964,8 +1967,11 @@ static netdev_tx_t sky2_xmit_frame(struct sk_buff *skb, struct net_device *dev)
 
 	sky2->tx_prod = slot;
 
+#if (defined CONFIG_ARCH_TRIDUCTOR)
+	/* Prevent large traffic conditions from halting transmissions */
 	if (tx_avail(sky2) <= MAX_SKB_TX_LE)
 		netif_stop_queue(dev);
+#endif
 
 	netdev_sent_queue(dev, skb->len);
 	sky2_put_idx(hw, txqaddr[sky2->port], sky2->tx_prod);
@@ -2626,6 +2632,37 @@ static int sky2_poll(struct napi_struct *napi, int to_do)
 	}
 }
 
+#if (defined CONFIG_ARCH_TRIDUCTOR)
+#define CHIP_DEV_PRIV_LEN 0x200
+typedef int (*chip_cfe_acc_rx)(struct sk_buff *skb, struct net_device *dev);
+static void *g_acc_rx_callback = NULL;
+
+int tri_wifi_dev_recv_reg(void *dev_recv)
+{
+	g_acc_rx_callback = dev_recv;
+	return 0;
+}
+EXPORT_SYMBOL(tri_wifi_dev_recv_reg);
+
+typedef int (*p_tri_acc_func)(struct sk_buff *skb, struct net_device *dev);
+static p_tri_acc_func g_p_tri_acc_func = NULL;
+
+p_tri_acc_func tri_wifi_dev_send_reg(p_tri_acc_func p_func)
+{
+	g_p_tri_acc_func = p_func;
+	return sky2_xmit_frame;
+}
+EXPORT_SYMBOL(tri_wifi_dev_send_reg);
+
+netdev_tx_t chip_sky2_xmit_frame(struct sk_buff *skb, struct net_device *dev)
+{
+	if (g_p_tri_acc_func)
+		return g_p_tri_acc_func(skb, dev);
+	return sky2_xmit_frame(skb, dev);
+}
+#endif /* CONFIG_ARCH_TRIDUCTOR */
+
 static inline void sky2_skb_rx(const struct sky2_port *sky2,
 			       struct sk_buff *skb)
 {
@@ -2749,10 +2786,17 @@ static int sky2_poll(struct napi_struct *napi, int budget)
 				else
 					skb->ip_summed = CHECKSUM_NONE;
 			}
-
+#if (defined CONFIG_ARCH_TRIDUCTOR)
+			if (g_acc_rx_callback != NULL) {
+				((chip_cfe_acc_rx)g_acc_rx_callback)(skb, dev);
+			} else {
+				skb->protocol = eth_type_trans(skb, dev);
+				sky2_skb_rx(sky2, skb);
+			}
+#else
 			skb->protocol = eth_type_trans(skb, dev);
 			sky2_skb_rx(sky2, skb);
-
+#endif
 			/* Stop after net poll weight */
 			if (++work_done >= to_do)
 				goto exit_loop;
@@ -4689,7 +4733,11 @@ static const struct net_device_ops sky2_netdev_ops = {
 	{
 		.ndo_open		= sky2_open,
 		.ndo_stop		= sky2_close,
+#ifdef CONFIG_ARCH_TRIDUCTOR
 		.ndo_start_xmit		= chip_sky2_xmit_frame,
+#else
+		.ndo_start_xmit		= sky2_xmit_frame,
+#endif
 		.ndo_do_ioctl		= sky2_ioctl,
 		.ndo_validate_addr	= eth_validate_addr,
 		.ndo_set_mac_address	= sky2_set_mac_address,
@@ -4706,7 +4754,11 @@ static const struct net_device_ops sky2_netdev_ops_vlan = {
 	{
 		.ndo_open		= sky2_open,
 		.ndo_stop		= sky2_close,
+#ifdef CONFIG_ARCH_TRIDUCTOR
 		.ndo_start_xmit		= chip_sky2_xmit_frame,
+#else
+		.ndo_start_xmit		= sky2_xmit_frame,
+#endif
 		.ndo_do_ioctl		= sky2_ioctl,
 		.ndo_validate_addr	= eth_validate_addr,
 		.ndo_set_mac_address	= sky2_set_mac_address,
@@ -4724,7 +4776,13 @@ static struct net_device *sky2_init_netdev(struct pci_dev *pdev,
 					   int highmem, int wol)
 {
 	struct sky2_port *sky2;
+#if (defined CONFIG_ARCH_TRIDUCTOR)
+	struct net_device *dev = alloc_netdev_mq(
+		sizeof(*sky2) + CHIP_DEV_PRIV_LEN, "marvell%d",
+		NET_NAME_UNKNOWN, ether_setup, 1);
+#else
 	struct net_device *dev = alloc_etherdev(sizeof(*sky2));
+#endif
 	int ret;
 
 	if (!dev)
@@ -4950,7 +5008,17 @@ static int sky2_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	int err, using_dac = 0, wol_default;
 	u32 reg;
 	char buf1[16];
+#ifdef CONFIG_ARCH_TRIDUCTOR
+	struct device_node *np;
+
+	np = of_find_compatible_node(NULL, NULL, "tri,pcie");
+	if (np == NULL)
+		goto err_out;
+	if (of_dma_is_coherent(np))
+		set_dma_ops(&pdev->dev, &arm_coherent_dma_ops);
+	else
+		set_dma_ops(&pdev->dev, &arm_dma_ops);
+#endif
 	err = pci_enable_device(pdev);
 	if (err) {
 		dev_err(&pdev->dev, "cannot enable PCI device\n");
diff --git a/drivers/net/ppp/ppp_generic.c b/drivers/net/ppp/ppp_generic.c
index 9c0123456..23fedcba1 100644
--- a/drivers/net/ppp/ppp_generic.c
+++ b/drivers/net/ppp/ppp_generic.c
@@ -53,6 +53,10 @@
 #include <net/net_namespace.h>
 #include <net/netns/generic.h>
 
+#ifdef CONFIG_RTOS_SKB_EXTEND
+#include <tr6560/net/triams_exskbuff.h>
+#endif
+
 #define PPP_VERSION	"2.4.2"
 
 /*
@@ -1346,6 +1350,11 @@ static void ppp_xmit_process(struct ppp *ppp, struct sk_buff *skb)
 	proto = npindex_to_proto[npi];
 	put_unaligned_be16(proto, pp);
 
+#if (defined CONFIG_ARCH_TRIDUCTOR)
+	nf_conntrack_get(skb_nfct(skb));
+	EXT_SKB_MEM(skb, nfct_ppp) = skb_nfct(skb);
+#endif
+
 	skb_scrub_packet(skb, !net_eq(ppp->ppp_net, dev_net(ppp->dev)));
 	ppp_xmit_process(ppp, skb);
 
@@ -3433,6 +3442,39 @@ static struct ppp *ppp_idr_find(struct idr *p, int n)
 	return idr_find(p, n);
 }
 
+#if (defined CONFIG_ARCH_TRIDUCTOR)
+#include <linux/if_pppox.h>
+
+struct net_device *ppp_get_relate_dev(struct net_device *ppp_dev)
+{
+	struct list_head *list;
+	struct channel *pch;
+	struct sock *sk;
+	struct pppox_sock *po;
+	struct ppp *ppp;
+
+	if ((ppp_dev->flags & IFF_POINTOPOINT) == 0)
+		return NULL;
+
+	ppp = netdev_priv(ppp_dev);
+	if (!ppp)
+		return NULL;
+
+	list = &ppp->channels;
+	if (list_empty(list))
+		return NULL;
+
+	/* only fetch underlying device if not SC_MULTILINK */
+	if ((ppp->flags & SC_MULTILINK) == 0) {
+		list = list->next;
+		pch = list_entry(list, struct channel, clist);
+		sk = (struct sock *)pch->chan->private;
+		po = pppox_sk(sk);
+		if (po)
+			return po->pppoe_dev;
+	}
+	return NULL;
+}
+EXPORT_SYMBOL(ppp_get_relate_dev);
+#endif /* CONFIG_ARCH_TRIDUCTOR */
+
 /* Module/initialization stuff */
 
 module_init(ppp_init);
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index d2389bfbc..ad9eb1234 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -1145,6 +1145,11 @@ static inline struct sk_buff *alloc_skb_fclone(unsigned int size, gfp_t priority)
 	return __alloc_skb(size, priority, SKB_ALLOC_FCLONE, NUMA_NO_NODE);
 }
 
+#ifdef CONFIG_RTOS_SKB_EXTEND
+extern int (*wifipktfree)(struct sk_buff *skb);
+extern void (*skb_priv_copy)(struct sk_buff *new, const struct sk_buff *old);
+#endif
+
 struct sk_buff *skb_morph(struct sk_buff *dst, struct sk_buff *src);
 void skb_headers_offset_update(struct sk_buff *skb, int off);
 int skb_copy_ubufs(struct sk_buff *skb, gfp_t gfp_mask);
diff --git a/net/bridge/br_input.c b/net/bridge/br_input.c
index 12abcd345..789faced0 100644
--- a/net/bridge/br_input.c
+++ b/net/bridge/br_input.c
@@ -23,6 +23,10 @@
 #include "br_private_tunnel.h"
 #include "br_private_offload.h"
+#ifdef CONFIG_RTOS_SKB_EXTEND
+#include <tr6560/net/triams_exskbuff.h>
+#endif
+
 static int br_netif_receive_skb(struct net *net, struct sock *sk, struct sk_buff *skb)
 {
@@ -168,6 +172,11 @@ br_handle_frame_finish(struct net *net, struct sock *sk, struct sk_buff *skb)
 
 		if (now != dst->used)
 			dst->used = now;
+#if (defined CONFIG_ARCH_TRIDUCTOR)
+#define CHIP_BR_ACC 1
+		EXT_SKB_MEM(skb, br_acc_flag) = CHIP_BR_ACC;
+#endif
 		br_forward(dst->dst, skb, local_rcv, false);
 	} else {
 		br_offload_skb_disable(skb);
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 56abcde12..672abc9fe 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -80,6 +80,14 @@
 
 #include "datagram.h"
 
+#ifdef CONFIG_RTOS_SKB_EXTEND
+int (*wifipktfree)(struct sk_buff *skb);
+EXPORT_SYMBOL(wifipktfree);
+void (*skb_priv_copy)(struct sk_buff *new, const struct sk_buff *old);
+EXPORT_SYMBOL(skb_priv_copy);
+extern void rtos_skb_extend_init(void);
+#endif
+
 struct kmem_cache *skbuff_head_cache __ro_after_init;
 static struct kmem_cache *skbuff_fclone_cache __ro_after_init;
 #ifdef CONFIG_SKB_EXTENSIONS
@@ -88,6 +96,40 @@
 int sysctl_max_skb_frags __read_mostly = MAX_SKB_FRAGS;
 EXPORT_SYMBOL(sysctl_max_skb_frags);
 
+#ifdef CONFIG_RTOS_SKB_EXTEND
+#define MAX_PRIV_LEN 4096
+static int skb_priv_len __read_mostly = 128;
+
+static int __init get_skb_priv_len(char *arg)
+{
+	get_option(&arg, &skb_priv_len);
+	if (skb_priv_len > MAX_PRIV_LEN)
+		skb_priv_len = MAX_PRIV_LEN;
+	pr_info("skbuff priv len is %d.\n", skb_priv_len);
+	return 0;
+}
+early_param("skb_priv", get_skb_priv_len);
+
+static inline void set_skb_priv_date(void *skb_start, struct kmem_cache *type)
+{
+	int skip;
+	int len;
+
+	if (skb_priv_len <= 0)
+		return;
+
+	if (skbuff_fclone_cache == type) {
+		skip = (2 * sizeof(struct sk_buff)) + sizeof(atomic_t);
+		len = 2 * skb_priv_len;
+	} else {
+		skip = sizeof(struct sk_buff);
+		len = skb_priv_len;
+	}
+	memset(skb_start + skip, 0, len);
+}
+#endif
+
 /**
  *	skb_panic - private function for out-of-line support
  *	@skb:	buffer
@@ -224,6 +266,9 @@ static struct sk_buff *__alloc_skb(unsigned int size, gfp_t gfp_mask,
 	 * the tail pointer in struct sk_buff!
 	 */
 	memset(skb, 0, offsetof(struct sk_buff, tail));
+#ifdef CONFIG_RTOS_SKB_EXTEND
+	set_skb_priv_date(skb, cache);
+#endif
 	/* Account for allocated memory : skb + skb->head */
 	skb->truesize = SKB_TRUESIZE(size);
 	skb->pfmemalloc = pfmemalloc;
@@ -319,7 +364,9 @@ struct sk_buff *__build_skb(void *data, unsigned int frag_size)
 	memset(skb, 0, offsetof(struct sk_buff, tail));
 
+#ifdef CONFIG_RTOS_SKB_EXTEND
 	set_skb_priv_date(skb, skbuff_head_cache);
+#endif
 	return __build_skb_around(skb, data, frag_size);
 }
 
@@ -441,14 +488,18 @@ struct sk_buff *__netdev_alloc_skb(struct net_device *dev, unsigned int length,
 	/* If requested length is either too small or too big,
 	 * we use kmalloc() for skb->head allocation.
 	 */
+#ifndef CONFIG_ARCH_TRIDUCTOR
 	if (length <= SKB_WITH_OVERHEAD(1024) ||
 	    length > SKB_WITH_OVERHEAD(PAGE_SIZE) ||
 	    (gfp_mask & (__GFP_DIRECT_RECLAIM | GFP_DMA))) {
+#endif
 		skb = __alloc_skb(length, gfp_mask, SKB_ALLOC_RX, NUMA_NO_NODE);
 		if (!skb)
 			goto out;
 		goto out;
+#ifndef CONFIG_ARCH_TRIDUCTOR
 	}
+#endif
 
 	length += SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
 	length = SKB_DATA_ALIGN(length);
@@ -707,6 +758,12 @@ void __kfree_skb(struct sk_buff *skb)
 {
+#ifdef CONFIG_RTOS_SKB_EXTEND
+	if (wifipktfree) {
+		if (!(*wifipktfree)(skb))
+			return;
+	}
+#endif
 	skb_release_all(skb);
 	kfree_skbmem(skb);
 }
@@ -998,6 +1055,11 @@ void skb_copy_header(struct sk_buff *new, const struct sk_buff *old)
 	CHECK_SKB_FIELD(tc_index);
 #endif
 
+#ifdef CONFIG_RTOS_SKB_EXTEND
+	if (skb_priv_copy)
+		(*skb_priv_copy)(new, old);
+#endif
+
 }
 
 /*
@@ -1475,6 +1537,9 @@ struct sk_buff *skb_clone(struct sk_buff *skb, gfp_t gfp_mask)
 		if (!n)
 			return NULL;
 
+#ifdef CONFIG_RTOS_SKB_EXTEND
+		set_skb_priv_date(n, skbuff_head_cache);
+#endif
 		n->fclone = SKB_FCLONE_UNAVAILABLE;
 	}
 
@@ -4318,18 +4383,30 @@ void __init skb_init(void)
 void __init skb_init(void)
 {
 	skbuff_head_cache = kmem_cache_create_usercopy("skbuff_head_cache",
+#ifdef CONFIG_RTOS_SKB_EXTEND
+				sizeof(struct sk_buff) + skb_priv_len,
+#else
 				sizeof(struct sk_buff),
+#endif
 				0,
 				SLAB_HWCACHE_ALIGN|SLAB_PANIC,
 				offsetof(struct sk_buff, cb),
 				sizeof_field(struct sk_buff, cb),
 				NULL);
 	skbuff_fclone_cache = kmem_cache_create("skbuff_fclone_cache",
+#ifdef CONFIG_RTOS_SKB_EXTEND
+				sizeof(struct sk_buff_fclones) + (2 * skb_priv_len),
+#else
 				sizeof(struct sk_buff_fclones),
+#endif
 				0,
 				SLAB_HWCACHE_ALIGN|SLAB_PANIC,
 				NULL);
+#ifdef CONFIG_RTOS_SKB_EXTEND
+	rtos_skb_extend_init();
+#else
 	skb_extensions_init();
+#endif
 }
 
 static int
diff --git a/net/ipv4/ip_output.c b/net/ipv4/ip_output.c
index 12abcde..45bcdef 100644
--- a/net/ipv4/ip_output.c
+++ b/net/ipv4/ip_output.c
@@ -577,6 +577,11 @@ static void copy_skb_header_ipv4(struct sk_buff *to, const struct sk_buff *from)
 	to->ipvs_property = from->ipvs_property;
 #endif
 	skb_copy_secmark(to, from);
+
+#ifdef CONFIG_RTOS_SKB_EXTEND
+	if (skb_priv_copy)
+		(*skb_priv_copy)(to, from);
+#endif
 }
 
 static int ip_fragment(struct net *net, struct sock *sk, struct sk_buff *skb,
diff --git a/net/ipv6/ip6_input.c b/net/ipv6/ip6_input.c
index 12345abc..cba98765 100644
--- a/net/ipv6/ip6_input.c
+++ b/net/ipv6/ip6_input.c
@@ -44,6 +44,26 @@
 #include <net/inet_ecn.h>
 #include <net/dst_metadata.h>
 
+#if (defined CONFIG_ARCH_TRIDUCTOR)
+typedef unsigned int(*gro_chnl_callback)(struct sk_buff *skb);
+static gro_chnl_callback g_gro_chnl_callback = NULL;
+
+void gro_chnl_hook_reg(gro_chnl_callback callback)
+{
+	g_gro_chnl_callback = callback;
+}
+EXPORT_SYMBOL(gro_chnl_hook_reg);
+
+unsigned int is_gro_chnl(struct sk_buff *skb)
+{
+	if (!g_gro_chnl_callback)
+		return 0;
+	return g_gro_chnl_callback(skb);
+}
+EXPORT_SYMBOL(is_gro_chnl);
+#endif
+
 INDIRECT_CALLABLE_DECLARE(void udp_v6_early_demux(struct sk_buff *));
 INDIRECT_CALLABLE_DECLARE(void tcp_v6_early_demux(struct sk_buff *));
 static void ip6_rcv_finish_core(struct net *net, struct sock *sk,
diff --git a/net/ipv6/ip6_output.c b/net/ipv6/ip6_output.c
index 67890abcde..f6543c210 100644
--- a/net/ipv6/ip6_output.c
+++ b/net/ipv6/ip6_output.c
@@ -663,6 +663,12 @@ static void copy_skb_header_ipv6(struct sk_buff *to, const struct sk_buff *from)
 	nf_copy(to, from);
 	skb_ext_copy(to, from);
 	skb_copy_secmark(to, from);
+
+#ifdef CONFIG_RTOS_SKB_EXTEND
+	if (skb_priv_copy)
+		(*skb_priv_copy)(to, from);
+#endif
+
 }
 
 int ip6_fraglist_init(struct sk_buff *skb, unsigned int hlen, u8 *prevhdr,
diff --git a/net/netfilter/nf_conntrack_standalone.c b/net/netfilter/nf_conntrack_standalone.c
index 12abcdef..90abc123 100644
--- a/net/netfilter/nf_conntrack_standalone.c
+++ b/net/netfilter/nf_conntrack_standalone.c
@@ -28,7 +28,11 @@
 /* Do not check the TCP window for incoming packets  */
 static int nf_ct_tcp_no_window_check __read_mostly = 1;
 
+#ifdef CONFIG_ARCH_TRIDUCTOR
+static bool enable_hooks = 1;
+#else
 static bool enable_hooks __read_mostly;
+#endif
 MODULE_PARM_DESC(enable_hooks, "Always enable conntrack hooks");
 module_param(enable_hooks, bool, 0000);
 
-- 
2.42.0

